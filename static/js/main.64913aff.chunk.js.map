{"version":3,"sources":["serviceWorker.ts","state/themeContext.tsx","utils/styles.ts","utils/color-list.ts","state/timerContext.tsx","components/header/header.tsx","components/footer/footer.tsx","components/clipboard/clipboard.tsx","components/emoji/emoji.tsx","utils/constants.ts","services/updateEmojiClick.ts","components/emoji-card/emoji-card.tsx","components/emoji-list/emoji-list.tsx","components/filter/filter.tsx","pages/home.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","ActionTypes","transitionSec","colors","random","x","Math","sin","Date","getMilliseconds","floor","colorComplement","color","rand","initialState","primaryColor","secondaryColor","initialContext","themeColors","setThemeColor","ThemeContext","React","createContext","reducer","state","action","type","SetTheme","value","ThemeProvider","children","useReducer","Provider","useThemeColor","useContext","emojiList","emojis","map","emoji","Header","useState","setEmoji","useEffect","interval","setInterval","clearInterval","className","role","aria-label","href","target","rel","Footer","Clipboard","props","name","hideOnTimer","setHideOnTimer","timeout","setTimeout","clearTimeout","onClick","lastTime","getTime","timer","setlastTime","TimerContext","SetlastTime","TimerProvider","Emoji","id","setStringCopied","handleClick","console","log","clickEmoji","navigator","clipboard","writeText","EmojiCard","code","text","EmojiList","filterString","copyString","len","length","_","idx","sortOrder","fullSortOrder","sort","a","b","indexOf","setEmojiList","filter","toLocaleLowerCase","includes","key","Filter","setFilterString","placeholder","onChange","e","currentTarget","Home","stringCopied","randColorIndex","style","minHeight","ReactDOM","render","StrictMode","path","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.64913aff.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useContext } from 'react';\nimport { colorComplement } from '../utils/color-list';\n\ninterface ThemeColors {\n  primaryColor: string;\n  secondaryColor: string;\n}\n\nconst initialState: ThemeColors = {\n  primaryColor: 'indigo',\n  secondaryColor: 'orange',\n};\n\nexport enum ActionTypes {\n  SetTheme = 'SetTheme',\n}\n\nexport type ContextActions = {\n  type: ActionTypes.SetTheme;\n  value: string;\n};\n\nconst initialContext: {\n  themeColors: ThemeColors;\n  setThemeColor: React.Dispatch<ContextActions>;\n} = {\n  themeColors: initialState,\n  setThemeColor: () => {},\n};\n\nconst ThemeContext = React.createContext(initialContext);\n\nconst reducer = (state: ThemeColors, action: ContextActions) => {\n  switch (action.type) {\n    case ActionTypes.SetTheme:\n      return {\n        ...state,\n        primaryColor: action.value,\n        secondaryColor: colorComplement(action.value),\n      };\n    default:\n      return state;\n  }\n};\n\nexport function ThemeProvider({\n  children,\n}: {\n  children: JSX.Element;\n}): JSX.Element {\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n\n  const themeColors = state;\n  const setThemeColor = dispatch;\n\n  return (\n    <ThemeContext.Provider value={{ themeColors, setThemeColor }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport const useThemeColor = (): {\n  themeColors: ThemeColors;\n  setThemeColor: React.Dispatch<ContextActions>;\n} => useContext(ThemeContext);\n","export const transitionSec = `transition duration-1000 ease-in-out`;\n","export const colors = [\n  'indigo',\n  'blue',\n  'red',\n  'orange',\n  'teal',\n  'yellow',\n  'green',\n  'purple',\n  'pink',\n];\n\nexport const random = (): number => {\n  const x = Math.sin(new Date().getMilliseconds()) * 10000;\n  return x - Math.floor(x);\n};\n\nexport const colorComplement = (color: string): string => {\n  const rand = random() > 0.5;\n  switch (color) {\n    case 'red':\n      return rand ? 'teal' : 'yellow';\n    case 'orange':\n      return rand ? 'purple' : 'green';\n    case 'blue':\n      return rand ? 'blue' : 'orange';\n    case 'indigo':\n      return rand ? 'pink' : 'orange';\n    case 'teal':\n      return rand ? 'green' : 'red';\n    case 'green':\n      return rand ? 'teal' : 'pink';\n    case 'purple':\n      return rand ? 'orange' : 'red';\n    case 'pink':\n      return rand ? 'yellow' : 'green';\n    case 'yellow':\n      return rand ? 'purple' : 'blue';\n    default:\n      return 'teal';\n  }\n};\n","import React, { useContext } from 'react';\nimport { apiTimeout } from '../utils/constants';\n\ninterface Timer {\n  lastTime: number;\n}\n\nconst initialState: Timer = {\n  lastTime: new Date().getTime() - (apiTimeout - 5000),\n};\n\nexport enum ActionTypes {\n  SetlastTime = 'SetlastTime',\n}\n\nexport type ContextActions = {\n  type: ActionTypes.SetlastTime;\n};\n\nconst initialContext: {\n  timer: Timer;\n  setlastTime: React.Dispatch<ContextActions>;\n} = {\n  timer: initialState,\n  setlastTime: () => {},\n};\n\nconst TimerContext = React.createContext(initialContext);\n\nconst reducer = (state: Timer, action: ContextActions) => {\n  switch (action.type) {\n    case ActionTypes.SetlastTime:\n      return {\n        ...state,\n        lastTime: new Date().getTime(),\n      };\n    default:\n      return state;\n  }\n};\n\nexport function TimerProvider({\n  children,\n}: {\n  children: JSX.Element;\n}): JSX.Element {\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n\n  const timer = state;\n  const setlastTime = dispatch;\n\n  return (\n    <TimerContext.Provider value={{ timer, setlastTime }}>\n      {children}\n    </TimerContext.Provider>\n  );\n}\n\nexport const useTimer = (): {\n  timer: Timer;\n  setlastTime: React.Dispatch<ContextActions>;\n} => useContext(TimerContext);\n","import React, { useState, useEffect } from 'react';\nimport emojis from '../../data/emojis.json';\nimport { transitionSec } from '../../utils/styles';\nimport { useThemeColor } from '../../state/themeContext';\n\nconst emojiList = emojis.map(emoji => emoji.emoji);\n\nconst Header = (): JSX.Element => {\n  const { themeColors } = useThemeColor();\n  const { primaryColor, secondaryColor } = themeColors;\n  const [emoji, setEmoji] = useState(`🎨`);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const rand = Math.floor(Math.random() * 10);\n      setEmoji(emojiList[rand]);\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  });\n\n  return (\n    <header\n      className={`${transitionSec} bg-${primaryColor}-500 py-12 px-20 text-center`}>\n      <span className='text-6xl' role='img' aria-label='emoji'>\n        {emoji}\n      </span>\n      <h2 className='mb-6 text-3xl font-bold'>\n        Emojis for your commit messages\n      </h2>\n      <a\n        href='https://github.com/southworks/emojicommit'\n        target='_blank'\n        rel='noopener noreferrer'\n        className={`${transitionSec} bg-${secondaryColor}-500 hover:bg-${secondaryColor}-light text-white font-bold py-2 px-4 hover:border-${secondaryColor}-500 border-b-4 border-${secondaryColor}-700 border-${secondaryColor}-500 rounded focus:outline-none`}>\n        {`🎩 GitHub`}\n      </a>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport { transitionSec } from '../../utils/styles';\nimport { useThemeColor } from '../../state/themeContext';\n\nconst Footer = (): JSX.Element => {\n  const { themeColors } = useThemeColor();\n  const { primaryColor, secondaryColor } = themeColors;\n\n  return (\n    <footer className={`${transitionSec} bg-${secondaryColor}-500 py-4 px-20 `}>\n      <h2 className='flex flex-wrap mr-auto text-xl font-bold'>\n        You can suggest changes or new emojis in{' '}\n        <a\n          className={`${transitionSec} px-2 text-${primaryColor}-700`}\n          href='https://github.com/southworks/emojicommit'\n          target='_blank'\n          rel='noopener noreferrer'>\n          GitHub\n        </a>\n        by creating an issue or pull request.\n      </h2>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { useEffect, useState } from 'react';\nimport { useThemeColor } from '../../state/themeContext';\n\ninterface ClipboardProps {\n  name: string;\n}\n\nconst Clipboard = (props: ClipboardProps): JSX.Element => {\n  const { themeColors } = useThemeColor();\n  const { secondaryColor } = themeColors;\n  const { name } = props;\n  const [hideOnTimer, setHideOnTimer] = useState('hidden');\n\n  useEffect(() => {\n    if (name) {\n      setHideOnTimer('');\n    }\n    const timeout = setTimeout(() => setHideOnTimer('hidden'), 2500);\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [name]);\n\n  return (\n    <div\n      className={`transition ease-in-out duration-700 flex fixed mt-4 ml-4 justify-center font-bold bg-${secondaryColor}-500 rounded ${hideOnTimer} z-20`}>\n      <div className='p-4'>\n        <span>Copied</span>\n        <span className='bg-gray-400 rounded px-2 py-1 mx-2'>{name}</span>\n        <span>to the clipboard!</span>\n      </div>\n      <button\n        className='flex self-start pr-4 pt-1 font-bold focus:outline-none'\n        onClick={() => setHideOnTimer('hidden')}>\n        x\n      </button>\n    </div>\n  );\n};\n\nexport default Clipboard;\n","import React from 'react';\nimport { useTimer, ActionTypes } from '../../state/timerContext';\nimport { clickEmoji } from '../../services/updateEmojiClick';\nimport { apiTimeout } from '../../utils/constants';\n\ninterface EmojiProps {\n  name: string;\n  id: number;\n  setStringCopied: (_: string) => void;\n}\n\nconst Emoji = (props: EmojiProps): JSX.Element => {\n  const { timer, setlastTime } = useTimer();\n  const { id, name, setStringCopied } = props;\n\n  const handleClick = () => {\n    const now = new Date().getTime();\n    if (now - timer.lastTime > apiTimeout) {\n      clickEmoji(id);\n      setlastTime({\n        type: ActionTypes.SetlastTime,\n      });\n    }\n  };\n\n  return (\n    <button\n      className='transition duration-500 ease-in-out focus:outline-none focus:opacity-25 opacity-100 transform hover:-translate-y-1 font-semibold'\n      onClick={() => {\n        setStringCopied(name);\n        navigator.clipboard.writeText(name);\n        handleClick();\n      }}>\n      {name}\n    </button>\n  );\n};\n\nexport default Emoji;\n","export const apiTimeout = 30 * 1000;\n","import axios from 'axios';\n\n//const updateEmojiURI = `https://ksepyd0y8g.execute-api.sa-east-1.amazonaws.com/v1`;\n\nexport const clickEmoji = (id: number): void => {\n  console.log(id);\n  // axios\n  //   .post(updateEmojiURI, {\n  //     id,\n  //   })\n  //   .then(resp => console.log(resp));\n};\n","import React from 'react';\nimport Emoji from '../emoji/emoji';\nimport { EmojiData } from '../../models/emoji-data';\nimport './styles.scss';\n\ninterface EmojiCardProps {\n  setStringCopied: (_: string) => void;\n  emoji: EmojiData;\n}\n\nconst EmojiCard = (props: EmojiCardProps): JSX.Element => {\n  const { setStringCopied, emoji } = props;\n  return (\n    <div className='bg-white shadow-lg rounded-lg transition duration-500 ease-in-out transform hover:-translate-y-1 hover:scale-100 hover:shadow-2xl m-4 cw border border-gray-200'>\n      <div className='flex flex-col w-full h-48 text-center justify-center'>\n        <span className={`text-6xl p-12 bg-${emoji.color}-400`}>\n          <Emoji\n            id={emoji.id}\n            name={emoji.emoji}\n            setStringCopied={setStringCopied}\n          />\n        </span>\n      </div>\n      <div\n        className={`flex items-center px-6 py-3 bg-gray-900 justify-center bg-${emoji.color}-700`}>\n        <h1 className='mx-3 text-white font-semibold text-lg'>\n          <Emoji\n            id={emoji.id}\n            name={emoji.code}\n            setStringCopied={setStringCopied}\n          />\n        </h1>\n      </div>\n      <div className='flex py-4 px-6 justify-center'>\n        <p className='py-2 text-lg text-gray-600 text-center'>{emoji.text}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default EmojiCard;\n","import React, { useState, useEffect } from 'react';\nimport emojis from '../../data/emojis.json';\nimport EmojiCard from '../../components/emoji-card/emoji-card';\nimport { EmojiData } from '../../models/emoji-data';\nimport sortOrder from '../../data/sortOrder.json';\n\ninterface EmojiListProps {\n  filterString: string;\n  copyString: (_: string) => void;\n}\n\nconst EmojiList = (props: EmojiListProps): JSX.Element => {\n  const { filterString, copyString } = props;\n  const len = emojis.length;\n  const [fullSortOrder] = useState(\n    emojis.map((_, idx) => (!sortOrder[idx] ? len + 1 : sortOrder[idx])),\n  );\n  const [emojiList, setEmojiList] = useState(\n    emojis.sort((a, b) =>\n      fullSortOrder.indexOf(a.id) < fullSortOrder.indexOf(b.id) ? 1 : -1,\n    ),\n  );\n\n  useEffect(() => {\n    setEmojiList(\n      emojis.filter(\n        emoji =>\n          emoji.code.toLocaleLowerCase().includes(filterString) ||\n          emoji.text.toLocaleLowerCase().includes(filterString),\n      ),\n    );\n  }, [filterString]);\n\n  return (\n    <div className='flex flex-wrap max-w-screen-xl justify-center mt-8 mx-auto'>\n      {emojiList.map((emoji: EmojiData) => (\n        <EmojiCard\n          key={`emojikey-${emoji.id}`}\n          setStringCopied={copyString}\n          emoji={emoji}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default EmojiList;\n","import React from 'react';\nimport { transitionSec } from '../../utils/styles';\nimport { useThemeColor } from '../../state/themeContext';\n\ninterface FilterProps {\n  filterString: string;\n  setFilterString: (_: string) => void;\n}\n\nconst Filter = (props: FilterProps): JSX.Element => {\n  const { filterString, setFilterString } = props;\n  const { themeColors } = useThemeColor();\n  const { secondaryColor } = themeColors;\n\n  return (\n    <div className='flex max-w-screen-xl mt-8 justify-center mx-auto'>\n      <form>\n        <input\n          className={`p-2 focus:outline-none font-bold w-full cw rounded-sm border border-${secondaryColor}-400 ${transitionSec}`}\n          type='search'\n          placeholder='Filter emojis'\n          value={filterString}\n          onChange={e =>\n            setFilterString(e.currentTarget.value.toLocaleLowerCase())\n          }\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default Filter;\n","import React, { useState, useEffect } from 'react';\nimport Header from '../components/header/header';\nimport Footer from '../components/footer/footer';\nimport Clipboard from '../components/clipboard/clipboard';\nimport { colors, random } from '../utils/color-list';\nimport EmojiList from '../components/emoji-list/emoji-list';\nimport Filter from '../components/filter/filter';\nimport { transitionSec } from '../utils/styles';\nimport { useThemeColor, ActionTypes } from '../state/themeContext';\n\nconst Home = (): JSX.Element => {\n  const [stringCopied, setStringCopied] = useState('');\n  const [filterString, setFilterString] = useState('');\n  const { themeColors, setThemeColor } = useThemeColor();\n  const { primaryColor } = themeColors;\n\n  useEffect(() => {\n    const randColorIndex = Math.floor(random() * 10) % 9;\n    setThemeColor({\n      type: ActionTypes.SetTheme,\n      value: colors[randColorIndex],\n    });\n  }, [stringCopied, setThemeColor]);\n\n  return (\n    <div className={`${transitionSec} bg-${primaryColor}-100 min-h-screen`}>\n      <Clipboard name={stringCopied} />\n      <Header />\n      <Filter setFilterString={setFilterString} filterString={filterString} />\n      <div style={{ minHeight: '51.7vh' }}>\n        <EmojiList copyString={setStringCopied} filterString={filterString} />\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from './pages/home';\nimport { ThemeProvider } from './state/themeContext';\nimport { TimerProvider } from './state/timerContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TimerProvider>\n      <ThemeProvider>\n        <Router>\n          <Switch>\n            <Route path='/'>\n              <Home />\n            </Route>\n            <Route path='/about'></Route>\n            <Route path='/contributors'></Route>\n            <Route path='/github'></Route>\n          </Switch>\n        </Router>\n      </ThemeProvider>\n    </TimerProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}